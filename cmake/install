#!/usr/bin/env bash

set -euo pipefail

script_dir="$(readlink -e "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_dir")"
common_sh_path="$(readlink -e "$script_dir/../prologue.sh")"
. "$common_sh_path"
unset common_sh_path

PROGRAM_NAME=install

function print_usage ()
{
  cat <<'EOF'
Usage: install [OPTION]...
Install CMake.

  --version=<VERSION>        The version of CMake to install (default: the
                             latest release version).
  --prefix=<PREFIX>          Pass `--prefix=<PREFIX>' on to CMake `configure'
                             script (default: `/usr/local').
  --source-dir=<DIR>         The source directory (default:
                             `<PREFIX>/src/cmake').
  --clobber-source-dir       Delete the source directory before the source
                             archive is expanded there.
  -h, --help                 Display this help and exit.
EOF
}

if getopt -T; (( $? != 4 )); then
  die_with_runtime_error "$PROGRAM_NAME" "\`getopt' is not an enhanced version."
fi
opts="$(getopt -n "$PROGRAM_NAME" -l version:,prefix:,source-dir:,clobber-source-dir,help -- h "$@")"
eval set -- "$opts"

while (( $# > 0 )); do
  arg="$1"
  shift
  case "$arg" in
  --version)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    version="$1"
    shift
    ;;
  --prefix)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    prefix="$1"
    shift
    ;;
  --source-dir)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    source_dir="$1"
    shift
    ;;
  --clobber-source-dir)
    clobber_source_dir=yes
    ;;
  -h|--help)
    set +x
    print_usage
    exit 0
    ;;
  --)
    if (( $# > 0 )); then
      die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$1'."
    fi
    break
    ;;
  *)
    die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$arg'."
    ;;
  esac
done

bootstrap_options=()

if [[ ${version-NOT-DEFINED} == NOT-DEFINED ]]; then
  version="$(curl -fLsS 'https://cmake.org/files/LatestRelease/'                    \
               | grep -Eo 'cmake-[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.tar\.gz' \
               | grep -Eo '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+'                \
               | LANG=C.UTF-8 sort -Vu                                              \
               | tail -n 1)" \
    || die_with_runtime_error "$PROGRAM_NAME" "Failed to guess CMake latest version."
  if [[ ! $version =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
    die_with_runtime_error "$PROGRAM_NAME" "Failed to guess CMake latest version."
  fi
fi
if [[ ! $version =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
  die_with_user_error "$PROGRAM_NAME" "An invalid value \`$version' for \`--version' option."
fi

if [[ ${prefix-NOT-DEFINED} == NOT-DEFINED ]]; then
  prefix=/usr/local
fi
bootstrap_options+=("--prefix=$prefix")

temp_dir="$(mktemp -d)" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to create a temporary directory."
push_rollback_command "rm -rf \"$temp_dir\""

if [[ ${source_dir-NOT-DEFINED} == NOT-DEFINED ]]; then
  source_dir="$prefix/src/cmake"
fi
if [[ -z $source_dir ]]; then
  die_with_user_error "$PROGRAM_NAME" "An invalid value \`$source_dir' for \`--source-dir' option."
fi
if [[ $(readlink -m "$source_dir") != $(cd "$temp_dir" >/dev/null && readlink -m "$source_dir") ]]; then
  die_with_user_error "$PROGRAM_NAME" "A relative path \`$source_dir' is specified for \`--source-dir' option, but is expected to be an absolute one."
fi

if [[ -e $source_dir ]]; then
  case "${clobber_source_dir-no}" in
  yes)
    rm -rf "$source_dir"
    ;;
  no)
    die_with_user_error "$PROGRAM_NAME" "Could not overwrite \`$source_dir'. Use \`--clobber-source-dir' to overwrite it."
    ;;
  *)
    die_with_logic_error "$PROGRAM_NAME"
    ;;
  esac
fi
mkdir -p "$source_dir" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to create the source directory \`$source_dir'."

# C6C265324BBEBDC350B513D02D2CEF1034921684: rsa4096 2010-02-16 Brad King <brad.king@kitware.com>
key_ids=(C6C265324BBEBDC350B513D02D2CEF1034921684)
key_servers=('hkps://keyserver.ubuntu.com/', 'hkps://keys.mailvelope.com/', 'hkps://keys.openpgp.org/')
for key_server in "${key_servers[@]}"; do
  timeout 30 gpg --homedir "$temp_dir/.gnupg" --batch --keyserver "$key_server" --recv-keys "${key_ids[@]}" && break
done

tarball_basename="cmake-$version"
tarball_name="$tarball_basename.tar.gz"

(cd "$temp_dir" || exit $?
 curl -fLsSo "$tarball_name" "https://cmake.org/files/LatestRelease/$tarball_name") \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to download \`$tarball_name'."
(cd "$temp_dir" || exit $?
 curl -fLsSo "$tarball_basename-SHA-256.txt" "https://cmake.org/files/LatestRelease/$tarball_basename-SHA-256.txt") \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to download \`$tarball_basename-SHA-256.txt'."
(cd "$temp_dir" || exit $?
 curl -fLsSo "$tarball_basename-SHA-256.txt.asc" "https://cmake.org/files/LatestRelease/$tarball_basename-SHA-256.txt.asc") \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to download \`$tarball_basename-SHA-256.txt.asc'."

gpg                                             \
  --homedir "$temp_dir/.gnupg"                  \
  --batch                                       \
  --verify                                      \
  "$temp_dir/$tarball_basename-SHA-256.txt.asc" \
  "$temp_dir/$tarball_basename-SHA-256.txt" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to verify the signature in \`$tarball_basename-SHA-256.txt.asc'."
rm "$temp_dir/$tarball_basename-SHA-256.txt.asc"

(cd "$temp_dir" || exit $?
 grep -E "[[:space:]]$tarball_name"'$' "$tarball_basename-SHA-256.txt" | sha256sum -c) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to verify the message digest in \`$tarball_basename-SHA-256.txt'."
rm "$temp_dir/$tarball_basename-SHA-256.txt"

tar -xf "$temp_dir/$tarball_name" -C "$source_dir" --strip-components=1 \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to expand \`$tarball_name'."

(cd "$source_dir" && ./bootstrap --parallel=$(nproc) ${bootstrap_options[@]+"${bootstrap_options[@]}"}) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`bootstrap' CMake."

make_options=()
make_test_options=()

# Check whether this script is (directly or indirectly) called from `make'.
if ! declare -p MAKEFLAGS 2>/dev/null | grep -Eq '^declare -x MAKEFLAGS='; then
  make_options+=(-j -l "$(nproc)")
  make_test_options+=(-j -l "$(nproc)")
fi

(cd "$source_dir" && make ${make_options[@]+"${make_options[@]}"}) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`make' CMake."

true || (cd "$source_dir" && make ${make_test_options[@]+"${make_test_options[@]}"} test) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`make test' CMake."

(cd "$source_dir" && make install) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`make install' CMake."

rm -r "$source_dir"
mkdir "$source_dir"
tar -xf "$temp_dir/$tarball_name" -C "$source_dir" --strip-components=1 \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to expand \`$tarball_name'."
rm "$temp_dir/$tarball_name"
